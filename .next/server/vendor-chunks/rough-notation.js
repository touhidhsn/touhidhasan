"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rough-notation";
exports.ids = ["vendor-chunks/rough-notation"];
exports.modules = {

/***/ "(ssr)/./node_modules/rough-notation/lib/rough-notation.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/rough-notation/lib/rough-notation.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   annotate: () => (/* binding */ _),\n/* harmony export */   annotationGroup: () => (/* binding */ m)\n/* harmony export */ });\nconst t = \"http://www.w3.org/2000/svg\";\nclass e {\n    constructor(t){\n        this.seed = t;\n    }\n    next() {\n        return this.seed ? (2 ** 31 - 1 & (this.seed = Math.imul(48271, this.seed))) / 2 ** 31 : Math.random();\n    }\n}\nfunction s(t, e, s, i, n) {\n    return {\n        type: \"path\",\n        ops: c(t, e, s, i, n)\n    };\n}\nfunction i(t, e, i) {\n    const n = (t || []).length;\n    if (n > 2) {\n        const s = [];\n        for(let e = 0; e < n - 1; e++)s.push(...c(t[e][0], t[e][1], t[e + 1][0], t[e + 1][1], i));\n        return e && s.push(...c(t[n - 1][0], t[n - 1][1], t[0][0], t[0][1], i)), {\n            type: \"path\",\n            ops: s\n        };\n    }\n    return 2 === n ? s(t[0][0], t[0][1], t[1][0], t[1][1], i) : {\n        type: \"path\",\n        ops: []\n    };\n}\nfunction n(t, e, s, n, o) {\n    return function(t, e) {\n        return i(t, !0, e);\n    }([\n        [\n            t,\n            e\n        ],\n        [\n            t + s,\n            e\n        ],\n        [\n            t + s,\n            e + n\n        ],\n        [\n            t,\n            e + n\n        ]\n    ], o);\n}\nfunction o(t, e, s, i, n) {\n    return function(t, e, s, i) {\n        const [n, o] = l(i.increment, t, e, i.rx, i.ry, 1, i.increment * h(.1, h(.4, 1, s), s), s);\n        let r = f(n, null, s);\n        if (!s.disableMultiStroke) {\n            const [n] = l(i.increment, t, e, i.rx, i.ry, 1.5, 0, s), o = f(n, null, s);\n            r = r.concat(o);\n        }\n        return {\n            estimatedPoints: o,\n            opset: {\n                type: \"path\",\n                ops: r\n            }\n        };\n    }(t, e, n, function(t, e, s) {\n        const i = Math.sqrt(2 * Math.PI * Math.sqrt((Math.pow(t / 2, 2) + Math.pow(e / 2, 2)) / 2)), n = Math.max(s.curveStepCount, s.curveStepCount / Math.sqrt(200) * i), o = 2 * Math.PI / n;\n        let r = Math.abs(t / 2), h = Math.abs(e / 2);\n        const c = 1 - s.curveFitting;\n        return r += a(r * c, s), h += a(h * c, s), {\n            increment: o,\n            rx: r,\n            ry: h\n        };\n    }(s, i, n)).opset;\n}\nfunction r(t) {\n    return t.randomizer || (t.randomizer = new e(t.seed || 0)), t.randomizer.next();\n}\nfunction h(t, e, s, i = 1) {\n    return s.roughness * i * (r(s) * (e - t) + t);\n}\nfunction a(t, e, s = 1) {\n    return h(-t, t, e, s);\n}\nfunction c(t, e, s, i, n, o = !1) {\n    const r = o ? n.disableMultiStrokeFill : n.disableMultiStroke, h = u(t, e, s, i, n, !0, !1);\n    if (r) return h;\n    const a = u(t, e, s, i, n, !0, !0);\n    return h.concat(a);\n}\nfunction u(t, e, s, i, n, o, h) {\n    const c = Math.pow(t - s, 2) + Math.pow(e - i, 2), u = Math.sqrt(c);\n    let f = 1;\n    f = u < 200 ? 1 : u > 500 ? .4 : -.0016668 * u + 1.233334;\n    let l = n.maxRandomnessOffset || 0;\n    l * l * 100 > c && (l = u / 10);\n    const g = l / 2, d = .2 + .2 * r(n);\n    let p = n.bowing * n.maxRandomnessOffset * (i - e) / 200, _ = n.bowing * n.maxRandomnessOffset * (t - s) / 200;\n    p = a(p, n, f), _ = a(_, n, f);\n    const m = [], w = ()=>a(g, n, f), v = ()=>a(l, n, f);\n    return o && (h ? m.push({\n        op: \"move\",\n        data: [\n            t + w(),\n            e + w()\n        ]\n    }) : m.push({\n        op: \"move\",\n        data: [\n            t + a(l, n, f),\n            e + a(l, n, f)\n        ]\n    })), h ? m.push({\n        op: \"bcurveTo\",\n        data: [\n            p + t + (s - t) * d + w(),\n            _ + e + (i - e) * d + w(),\n            p + t + 2 * (s - t) * d + w(),\n            _ + e + 2 * (i - e) * d + w(),\n            s + w(),\n            i + w()\n        ]\n    }) : m.push({\n        op: \"bcurveTo\",\n        data: [\n            p + t + (s - t) * d + v(),\n            _ + e + (i - e) * d + v(),\n            p + t + 2 * (s - t) * d + v(),\n            _ + e + 2 * (i - e) * d + v(),\n            s + v(),\n            i + v()\n        ]\n    }), m;\n}\nfunction f(t, e, s) {\n    const i = t.length, n = [];\n    if (i > 3) {\n        const o = [], r = 1 - s.curveTightness;\n        n.push({\n            op: \"move\",\n            data: [\n                t[1][0],\n                t[1][1]\n            ]\n        });\n        for(let e = 1; e + 2 < i; e++){\n            const s = t[e];\n            o[0] = [\n                s[0],\n                s[1]\n            ], o[1] = [\n                s[0] + (r * t[e + 1][0] - r * t[e - 1][0]) / 6,\n                s[1] + (r * t[e + 1][1] - r * t[e - 1][1]) / 6\n            ], o[2] = [\n                t[e + 1][0] + (r * t[e][0] - r * t[e + 2][0]) / 6,\n                t[e + 1][1] + (r * t[e][1] - r * t[e + 2][1]) / 6\n            ], o[3] = [\n                t[e + 1][0],\n                t[e + 1][1]\n            ], n.push({\n                op: \"bcurveTo\",\n                data: [\n                    o[1][0],\n                    o[1][1],\n                    o[2][0],\n                    o[2][1],\n                    o[3][0],\n                    o[3][1]\n                ]\n            });\n        }\n        if (e && 2 === e.length) {\n            const t = s.maxRandomnessOffset;\n            n.push({\n                op: \"lineTo\",\n                data: [\n                    e[0] + a(t, s),\n                    e[1] + a(t, s)\n                ]\n            });\n        }\n    } else 3 === i ? (n.push({\n        op: \"move\",\n        data: [\n            t[1][0],\n            t[1][1]\n        ]\n    }), n.push({\n        op: \"bcurveTo\",\n        data: [\n            t[1][0],\n            t[1][1],\n            t[2][0],\n            t[2][1],\n            t[2][0],\n            t[2][1]\n        ]\n    })) : 2 === i && n.push(...c(t[0][0], t[0][1], t[1][0], t[1][1], s));\n    return n;\n}\nfunction l(t, e, s, i, n, o, r, h) {\n    const c = [], u = [], f = a(.5, h) - Math.PI / 2;\n    u.push([\n        a(o, h) + e + .9 * i * Math.cos(f - t),\n        a(o, h) + s + .9 * n * Math.sin(f - t)\n    ]);\n    for(let r = f; r < 2 * Math.PI + f - .01; r += t){\n        const t = [\n            a(o, h) + e + i * Math.cos(r),\n            a(o, h) + s + n * Math.sin(r)\n        ];\n        c.push(t), u.push(t);\n    }\n    return u.push([\n        a(o, h) + e + i * Math.cos(f + 2 * Math.PI + .5 * r),\n        a(o, h) + s + n * Math.sin(f + 2 * Math.PI + .5 * r)\n    ]), u.push([\n        a(o, h) + e + .98 * i * Math.cos(f + r),\n        a(o, h) + s + .98 * n * Math.sin(f + r)\n    ]), u.push([\n        a(o, h) + e + .9 * i * Math.cos(f + .5 * r),\n        a(o, h) + s + .9 * n * Math.sin(f + .5 * r)\n    ]), [\n        u,\n        c\n    ];\n}\nfunction g(t, e) {\n    return {\n        maxRandomnessOffset: 2,\n        roughness: \"highlight\" === t ? 3 : 1.5,\n        bowing: 1,\n        stroke: \"#000\",\n        strokeWidth: 1.5,\n        curveTightness: 0,\n        curveFitting: .95,\n        curveStepCount: 9,\n        fillStyle: \"hachure\",\n        fillWeight: -1,\n        hachureAngle: -41,\n        hachureGap: -1,\n        dashOffset: -1,\n        dashGap: -1,\n        zigzagOffset: -1,\n        combineNestedSvgPaths: !1,\n        disableMultiStroke: \"double\" !== t,\n        disableMultiStrokeFill: !1,\n        seed: e\n    };\n}\nfunction d(e, r, h, a, c, u) {\n    const f = [];\n    let l = h.strokeWidth || 2;\n    const d = function(t) {\n        const e = t.padding;\n        if (e || 0 === e) {\n            if (\"number\" == typeof e) return [\n                e,\n                e,\n                e,\n                e\n            ];\n            if (Array.isArray(e)) {\n                const t = e;\n                if (t.length) switch(t.length){\n                    case 4:\n                        return [\n                            ...t\n                        ];\n                    case 1:\n                        return [\n                            t[0],\n                            t[0],\n                            t[0],\n                            t[0]\n                        ];\n                    case 2:\n                        return [\n                            ...t,\n                            ...t\n                        ];\n                    case 3:\n                        return [\n                            ...t,\n                            t[1]\n                        ];\n                    default:\n                        return [\n                            t[0],\n                            t[1],\n                            t[2],\n                            t[3]\n                        ];\n                }\n            }\n        }\n        return [\n            5,\n            5,\n            5,\n            5\n        ];\n    }(h), p = void 0 === h.animate || !!h.animate, _ = h.iterations || 2, m = h.rtl ? 1 : 0, w = g(\"single\", u);\n    switch(h.type){\n        case \"underline\":\n            {\n                const t = r.y + r.h + d[2];\n                for(let e = m; e < _ + m; e++)e % 2 ? f.push(s(r.x + r.w, t, r.x, t, w)) : f.push(s(r.x, t, r.x + r.w, t, w));\n                break;\n            }\n        case \"strike-through\":\n            {\n                const t = r.y + r.h / 2;\n                for(let e = m; e < _ + m; e++)e % 2 ? f.push(s(r.x + r.w, t, r.x, t, w)) : f.push(s(r.x, t, r.x + r.w, t, w));\n                break;\n            }\n        case \"box\":\n            {\n                const t = r.x - d[3], e = r.y - d[0], s = r.w + (d[1] + d[3]), i = r.h + (d[0] + d[2]);\n                for(let o = 0; o < _; o++)f.push(n(t, e, s, i, w));\n                break;\n            }\n        case \"bracket\":\n            {\n                const t = Array.isArray(h.brackets) ? h.brackets : h.brackets ? [\n                    h.brackets\n                ] : [\n                    \"right\"\n                ], e = r.x - 2 * d[3], s = r.x + r.w + 2 * d[1], n = r.y - 2 * d[0], o = r.y + r.h + 2 * d[2];\n                for (const h of t){\n                    let t;\n                    switch(h){\n                        case \"bottom\":\n                            t = [\n                                [\n                                    e,\n                                    r.y + r.h\n                                ],\n                                [\n                                    e,\n                                    o\n                                ],\n                                [\n                                    s,\n                                    o\n                                ],\n                                [\n                                    s,\n                                    r.y + r.h\n                                ]\n                            ];\n                            break;\n                        case \"top\":\n                            t = [\n                                [\n                                    e,\n                                    r.y\n                                ],\n                                [\n                                    e,\n                                    n\n                                ],\n                                [\n                                    s,\n                                    n\n                                ],\n                                [\n                                    s,\n                                    r.y\n                                ]\n                            ];\n                            break;\n                        case \"left\":\n                            t = [\n                                [\n                                    r.x,\n                                    n\n                                ],\n                                [\n                                    e,\n                                    n\n                                ],\n                                [\n                                    e,\n                                    o\n                                ],\n                                [\n                                    r.x,\n                                    o\n                                ]\n                            ];\n                            break;\n                        case \"right\":\n                            t = [\n                                [\n                                    r.x + r.w,\n                                    n\n                                ],\n                                [\n                                    s,\n                                    n\n                                ],\n                                [\n                                    s,\n                                    o\n                                ],\n                                [\n                                    r.x + r.w,\n                                    o\n                                ]\n                            ];\n                    }\n                    t && f.push(i(t, !1, w));\n                }\n                break;\n            }\n        case \"crossed-off\":\n            {\n                const t = r.x, e = r.y, i = t + r.w, n = e + r.h;\n                for(let o = m; o < _ + m; o++)o % 2 ? f.push(s(i, n, t, e, w)) : f.push(s(t, e, i, n, w));\n                for(let o = m; o < _ + m; o++)o % 2 ? f.push(s(t, n, i, e, w)) : f.push(s(i, e, t, n, w));\n                break;\n            }\n        case \"circle\":\n            {\n                const t = g(\"double\", u), e = r.w + (d[1] + d[3]), s = r.h + (d[0] + d[2]), i = r.x - d[3] + e / 2, n = r.y - d[0] + s / 2, h = Math.floor(_ / 2), a = _ - 2 * h;\n                for(let r = 0; r < h; r++)f.push(o(i, n, e, s, t));\n                for(let t = 0; t < a; t++)f.push(o(i, n, e, s, w));\n                break;\n            }\n        case \"highlight\":\n            {\n                const t = g(\"highlight\", u);\n                l = .95 * r.h;\n                const e = r.y + r.h / 2;\n                for(let i = m; i < _ + m; i++)i % 2 ? f.push(s(r.x + r.w, e, r.x, e, t)) : f.push(s(r.x, e, r.x + r.w, e, t));\n                break;\n            }\n    }\n    if (f.length) {\n        const s = function(t) {\n            const e = [];\n            for (const s of t){\n                let t = \"\";\n                for (const i of s.ops){\n                    const s = i.data;\n                    switch(i.op){\n                        case \"move\":\n                            t.trim() && e.push(t.trim()), t = `M${s[0]} ${s[1]} `;\n                            break;\n                        case \"bcurveTo\":\n                            t += `C${s[0]} ${s[1]}, ${s[2]} ${s[3]}, ${s[4]} ${s[5]} `;\n                            break;\n                        case \"lineTo\":\n                            t += `L${s[0]} ${s[1]} `;\n                    }\n                }\n                t.trim() && e.push(t.trim());\n            }\n            return e;\n        }(f), i = [], n = [];\n        let o = 0;\n        const r = (t, e, s)=>t.setAttribute(e, s);\n        for (const a of s){\n            const s = document.createElementNS(t, \"path\");\n            if (r(s, \"d\", a), r(s, \"fill\", \"none\"), r(s, \"stroke\", h.color || \"currentColor\"), r(s, \"stroke-width\", \"\" + l), p) {\n                const t = s.getTotalLength();\n                i.push(t), o += t;\n            }\n            e.appendChild(s), n.push(s);\n        }\n        if (p) {\n            let t = 0;\n            for(let e = 0; e < n.length; e++){\n                const s = n[e], r = i[e], h = o ? c * (r / o) : 0, u = a + t, f = s.style;\n                f.strokeDashoffset = \"\" + r, f.strokeDasharray = \"\" + r, f.animation = `rough-notation-dash ${h}ms ease-out ${u}ms forwards`, t += h;\n            }\n        }\n    }\n}\nclass p {\n    constructor(t, e){\n        this._state = \"unattached\", this._resizing = !1, this._seed = Math.floor(Math.random() * 2 ** 31), this._lastSizes = [], this._animationDelay = 0, this._resizeListener = ()=>{\n            this._resizing || (this._resizing = !0, setTimeout(()=>{\n                this._resizing = !1, \"showing\" === this._state && this.haveRectsChanged() && this.show();\n            }, 400));\n        }, this._e = t, this._config = JSON.parse(JSON.stringify(e)), this.attach();\n    }\n    get animate() {\n        return this._config.animate;\n    }\n    set animate(t) {\n        this._config.animate = t;\n    }\n    get animationDuration() {\n        return this._config.animationDuration;\n    }\n    set animationDuration(t) {\n        this._config.animationDuration = t;\n    }\n    get iterations() {\n        return this._config.iterations;\n    }\n    set iterations(t) {\n        this._config.iterations = t;\n    }\n    get color() {\n        return this._config.color;\n    }\n    set color(t) {\n        this._config.color !== t && (this._config.color = t, this.refresh());\n    }\n    get strokeWidth() {\n        return this._config.strokeWidth;\n    }\n    set strokeWidth(t) {\n        this._config.strokeWidth !== t && (this._config.strokeWidth = t, this.refresh());\n    }\n    get padding() {\n        return this._config.padding;\n    }\n    set padding(t) {\n        this._config.padding !== t && (this._config.padding = t, this.refresh());\n    }\n    attach() {\n        if (\"unattached\" === this._state && this._e.parentElement) {\n            !function() {\n                if (!window.__rno_kf_s) {\n                    const t = window.__rno_kf_s = document.createElement(\"style\");\n                    t.textContent = \"@keyframes rough-notation-dash { to { stroke-dashoffset: 0; } }\", document.head.appendChild(t);\n                }\n            }();\n            const e = this._svg = document.createElementNS(t, \"svg\");\n            e.setAttribute(\"class\", \"rough-annotation\");\n            const s = e.style;\n            s.position = \"absolute\", s.top = \"0\", s.left = \"0\", s.overflow = \"visible\", s.pointerEvents = \"none\", s.width = \"100px\", s.height = \"100px\";\n            const i = \"highlight\" === this._config.type;\n            if (this._e.insertAdjacentElement(i ? \"beforebegin\" : \"afterend\", e), this._state = \"not-showing\", i) {\n                const t = window.getComputedStyle(this._e).position;\n                (!t || \"static\" === t) && (this._e.style.position = \"relative\");\n            }\n            this.attachListeners();\n        }\n    }\n    detachListeners() {\n        window.removeEventListener(\"resize\", this._resizeListener), this._ro && this._ro.unobserve(this._e);\n    }\n    attachListeners() {\n        this.detachListeners(), window.addEventListener(\"resize\", this._resizeListener, {\n            passive: !0\n        }), !this._ro && \"ResizeObserver\" in window && (this._ro = new window.ResizeObserver((t)=>{\n            for (const e of t)e.contentRect && this._resizeListener();\n        })), this._ro && this._ro.observe(this._e);\n    }\n    haveRectsChanged() {\n        if (this._lastSizes.length) {\n            const t = this.rects();\n            if (t.length !== this._lastSizes.length) return !0;\n            for(let e = 0; e < t.length; e++)if (!this.isSameRect(t[e], this._lastSizes[e])) return !0;\n        }\n        return !1;\n    }\n    isSameRect(t, e) {\n        const s = (t, e)=>Math.round(t) === Math.round(e);\n        return s(t.x, e.x) && s(t.y, e.y) && s(t.w, e.w) && s(t.h, e.h);\n    }\n    isShowing() {\n        return \"not-showing\" !== this._state;\n    }\n    refresh() {\n        this.isShowing() && !this.pendingRefresh && (this.pendingRefresh = Promise.resolve().then(()=>{\n            this.isShowing() && this.show(), delete this.pendingRefresh;\n        }));\n    }\n    show() {\n        switch(this._state){\n            case \"unattached\":\n                break;\n            case \"showing\":\n                this.hide(), this._svg && this.render(this._svg, !0);\n                break;\n            case \"not-showing\":\n                this.attach(), this._svg && this.render(this._svg, !1);\n        }\n    }\n    hide() {\n        if (this._svg) for(; this._svg.lastChild;)this._svg.removeChild(this._svg.lastChild);\n        this._state = \"not-showing\";\n    }\n    remove() {\n        this._svg && this._svg.parentElement && this._svg.parentElement.removeChild(this._svg), this._svg = void 0, this._state = \"unattached\", this.detachListeners();\n    }\n    render(t, e) {\n        let s = this._config;\n        e && (s = JSON.parse(JSON.stringify(this._config)), s.animate = !1);\n        const i = this.rects();\n        let n = 0;\n        i.forEach((t)=>n += t.w);\n        const o = s.animationDuration || 800;\n        let r = 0;\n        for(let e = 0; e < i.length; e++){\n            const h = o * (i[e].w / n);\n            d(t, i[e], s, r + this._animationDelay, h, this._seed), r += h;\n        }\n        this._lastSizes = i, this._state = \"showing\";\n    }\n    rects() {\n        const t = [];\n        if (this._svg) if (this._config.multiline) {\n            const e = this._e.getClientRects();\n            for(let s = 0; s < e.length; s++)t.push(this.svgRect(this._svg, e[s]));\n        } else t.push(this.svgRect(this._svg, this._e.getBoundingClientRect()));\n        return t;\n    }\n    svgRect(t, e) {\n        const s = t.getBoundingClientRect(), i = e;\n        return {\n            x: (i.x || i.left) - (s.x || s.left),\n            y: (i.y || i.top) - (s.y || s.top),\n            w: i.width,\n            h: i.height\n        };\n    }\n}\nfunction _(t, e) {\n    return new p(t, e);\n}\nfunction m(t) {\n    let e = 0;\n    for (const s of t){\n        const t = s;\n        t._animationDelay = e;\n        e += 0 === t.animationDuration ? 0 : t.animationDuration || 800;\n    }\n    const s = [\n        ...t\n    ];\n    return {\n        show () {\n            for (const t of s)t.show();\n        },\n        hide () {\n            for (const t of s)t.hide();\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rough-notation/lib/rough-notation.esm.js\n");

/***/ })

};
;